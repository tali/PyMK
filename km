#!/usr/bin/python

import asyncore
import os
import termios
from optparse import *

from MK import *
from ubx import *


parser = OptionParser()
parser.add_option("-d", "--device", metavar="DEV",
        help="Device to connect to MK (e.g. /dev/usbserial-*)")
#parser.set_default('device', "/dev/cu.usbserial-A600cnVE")
parser.set_default('device', "/dev/cu.MikroKopter_BT-SerialPo")
parser.add_option("--info", action='store_true',
        help="Display status/version information about MK")
parser.add_option("--show-settings", action='store_true',
        help="show settings")
parser.add_option("--show-mixer", action='store_true',
        help="show motor mixer settings")
parser.add_option("--load-mixer", metavar="MKM",
        help="Load mixer configuration from .mkm file")
#parser.add_option("--gps", action='store_true',
#        help="log GPS data")
parser.add_option("--channels", action='store_true',
        help="show channels")
#parser.add_option("--debug", action='store_true',
#        help="")

(options, args) = parser.parse_args()


mk = MK(options.device)

if options.info:
    cmd = CmdVersion(mk.fc)
    reply = mk.send_cmd(cmd)
    if reply:
        print "FlightCtrl", reply
    cmd = CmdVersion(mk.nc)
    reply = mk.send_cmd(cmd)
    if reply:
        print "NaviCtrl", reply
    cmd = CmdVersion(mk.mk3mag)
    reply = mk.send_cmd(cmd)
    if reply:
        print "MK3Mag", reply

#    for index in range(0, 10):
#        cmd = CmdAnalogLabel(mk.fc, index)
#        reply = mk.send_cmd(cmd)
#        print "label", index, reply


if options.show_settings:
    cmd = CmdGetSettings(mk.fc, 0xff)
    set, version, data = mk.send_cmd(cmd)
    print "settings", set, "version", version, data


if options.load_mixer:
    with open(options.load_mixer, "rt") as mkm:
        section = None
        data = [0] * 12 * 4
        for line in mkm:
            line = line.strip()
            if line[0] == '[' and line[-1] == ']':
                section = line[1:-1]
                continue
            else:
                (key,value) = line.split('=')

            if section == "Info" and key == "Name":
                name = value
                continue
            elif section == "Info" and key == "Version":
                if value != "1":
                    parser.error("Don't know how to handle MKM version %s!" % value)
                continue
            elif key[:5] != "Motor":
                parser.error("Invalid MKM key %s in section %s!" % (key, section))

            motor = int(key[5:])
            value = int(value)
            index = (motor-1) * 4
            nick = roll = yaw = 0
            if section == "Gas":
                index += 0
            elif section == "Nick":
                index += 1
                nick += value
            elif section == "Roll":
                index += 2
                roll += value
            elif section == "Yaw":
                index += 3
                yaw += value
            else:
                print "unknown section %s!" % section
                continue

            data[index] = value

    # check value
    if nick != 0:
        raise "Nick values not balanced!"
    if roll != 0:
        raise "Roll values not balanced!"
    if yaw != 0:
        raise "Yaw values not balanced!"

    cmd = CmdSetMotorMixer(mk.fc, name, data)
    reply = mk.send_cmd(cmd)
    if reply != 1:
        print "ERROR setting motor mixer"

if options.show_mixer:
    cmd = CmdGetMotorMixer(mk.fc)
    name, table = mk.send_cmd(cmd)
    print "Mixer", name
    print "Motor", "Gas", "Nick", "Roll", "Yaw"
    motor = 1
    while table[0]:
        print motor, table[0], table[1], table[2], table[3]
        table = table[4:]
        motor += 1




#if options.gps:
#    send_packet(link, 'c', 'u', [2])
#    ubx = UBX()
#    while True:
#        data = link.read(1)
#        ubx.parse(ord(data[0]))
#    link.write("#" + chr(0x1b) + chr(0x1b) +
#               chr(0x55) + chr(0xaa) + chr(0) + '\r')

if options.channels:
    while True:
        cmd = CmdGetChannels(mk.fc)
        reply = mk.send_cmd(cmd)
        print "channels", reply

