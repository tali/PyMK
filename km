#!/usr/bin/python

import asyncore
import os
import sys
import termios
from optparse import *

from MK import *
from ubx import *
from intelhex import IntelHex


parser = OptionParser()
parser.add_option("-d", "--device", metavar="DEV",
        help="Device to connect to MK (e.g. /dev/usbserial-*)")
#parser.set_default('device', "/dev/cu.usbserial-A600cnVE")
parser.set_default('device', "/dev/cu.MikroKopter_BT-SerialPo")
parser.add_option("--info", action='store_true',
        help="Display status/version information about MK")
parser.add_option("--display", action='store_true',
        help="show display text")
parser.add_option("--monitor", metavar="FC|NC|Mag",
        help="Display analog values")
parser.add_option("--show-settings", metavar="INDEX",
        help="show settings")
parser.add_option("--load-settings", metavar="FILE",
        help="show settings")
parser.add_option("--save-settings", metavar="FILE",
        help="show settings")
parser.add_option("--get", metavar="KEY",
        help="request a setting")
parser.add_option("--set", metavar="KEY=VALUE",
        help="change a setting")
parser.add_option("--show-mixer", action='store_true',
        help="show motor mixer settings")
parser.add_option("--load-mixer", metavar="MKM",
        help="Load mixer configuration from .mkm file")
#parser.add_option("--gps", action='store_true',
#        help="log GPS data")
parser.add_option("--channels", action='store_true',
        help="show channels")
parser.add_option("--motor-test", metavar="MOTOR=SPEED",
        help="test one motor")
parser.add_option("--reset", metavar="FC|NC|Mag",
        help="reset a board")
parser.add_option("--reset-settings", action='store_true',
        help="reset a board")
parser.add_option("--flash-software", metavar="FILE",
        help="load new system software")
parser.add_option("--debug", action='store_true',
        help="")

(options, args) = parser.parse_args()


mk = MK(options.device)

def get_board(name):
    if name == mk.fc.name or name.upper() == "FC":
        return mk.fc
    elif name == mk.nc.name or name.upper() == "NC":
        return mk.nc
    elif name == mk.mk3mag.name or name.upper() == "MAG":
        return mk.mk3mag
    else:
        parser.error("use FC, NC, or Mag as board name")


if options.debug:
    mk.debug = True

if options.info:
    cmd = CmdVersion(mk.fc)
    reply = mk.send_cmd(cmd)
    if reply:
        print "FlightCtrl", reply
    cmd = CmdVersion(mk.nc)
    reply = mk.send_cmd(cmd)
    if reply:
        print "NaviCtrl", reply
    cmd = CmdVersion(mk.mk3mag)
    reply = mk.send_cmd(cmd)
    if reply:
        print "MK3Mag", reply
    cmd = CmdErrorMsg(mk.nc)
    reply = mk.send_cmd(cmd)
    if reply:
        print "Status:", reply

if options.monitor:
    board = get_board(options.monitor)
    label = []
    for index in range(0, 32):
        cmd = CmdAnalogLabel(board, index)
        reply = mk.send_cmd(cmd)
        label.append( reply )
        print ".",

    cmd = CmdGetDebug(board, 20)
    stop = CmdGetDebug(board, 0)
    reply = mk.send_cmd(cmd)
    while True:
        try:
            print
            print board.name
            for key, value in zip( label, reply[1:] ):
                print "%15s %d" % (key, value)
            reply = mk.recv_cmd(cmd)
            # try to reestablish data stream
            while not reply:
                if mk.debug:
                    print "ARG!"
                mk.send_cmd(stop)
                time.sleep(0.1)
                mk.selected = None
                reply = mk.send_cmd(cmd)
        except KeyboardInterrupt:
            break
    mk.send_cmd(cmd)

if options.show_settings:
    if options.show_settings == "-":
        index = 0xff
    else:
        index = int(options.show_settings)
    cmd = CmdGetSettings(mk.fc, index)
    set, version, data = mk.send_cmd(cmd)
    print "settings", set, "version", version
    for key in sorted(data):
        print "%30s: %d" % (key, data[key])

if options.get:
    cmd = CmdGetSettings(mk.fc, 0xff)
    set, version, data = mk.send_cmd(cmd)
    print data[options.get]

if options.set:
    key, value = options.set.split('=')
    value = int(value)
    cmd = CmdGetSettings(mk.fc, 0xff)
    set, version, data = mk.send_cmd(cmd)
    data[key] = value
    cmd = CmdSetSettings(mk.fc, set, version, data)
    status = mk.send_cmd(cmd)
    if status != set:
        print "cannot set %s to %d (setting %d)" % (key, value, set)


if options.load_mixer:
    with open(options.load_mixer, "rt") as mkm:
        section = None
        data = [0] * 12 * 4
        for line in mkm:
            line = line.strip()
            if line[0] == '[' and line[-1] == ']':
                section = line[1:-1]
                continue
            else:
                (key,value) = line.split('=')

            if section == "Info" and key == "Name":
                name = value
                continue
            elif section == "Info" and key == "Version":
                if value != "1":
                    parser.error("Don't know how to handle MKM version %s!" % value)
                continue
            elif key[:5] != "Motor":
                parser.error("Invalid MKM key %s in section %s!" % (key, section))

            motor = int(key[5:])
            value = int(value)
            index = (motor-1) * 4
            nick = roll = yaw = 0
            if section == "Gas":
                index += 0
            elif section == "Nick":
                index += 1
                nick += value
            elif section == "Roll":
                index += 2
                roll += value
            elif section == "Yaw":
                index += 3
                yaw += value
            else:
                print "unknown section %s!" % section
                continue

            data[index] = value

    # check value
    if nick != 0:
        raise "Nick values not balanced!"
    if roll != 0:
        raise "Roll values not balanced!"
    if yaw != 0:
        raise "Yaw values not balanced!"

    cmd = CmdSetMotorMixer(mk.fc, name, data)
    reply = mk.send_cmd(cmd)
    if reply != 1:
        print "ERROR setting motor mixer"

if options.show_mixer:
    cmd = CmdGetMotorMixer(mk.fc)
    name, table = mk.send_cmd(cmd)
    print "Mixer", name
    print "Motor", "Gas", "Nick", "Roll", "Yaw"
    motor = 1
    while len(table) >= 4:
        print motor, table[0], table[1], table[2], table[3]
        table = table[4:]
        motor += 1

if options.motor_test:
    list = [0] * 16
    motor, speed = options.motor_test.split('=')
    list[int(motor)] = int(speed)
    cmd = CmdMotorTest(mk.fc, list)
    mk.send_cmd(cmd)

if options.reset:
    board = get_board(options.reset)
    cmd = CmdReset(board)
    mk.send_cmd(cmd)
    print mk.recv_data(4096, 5)

if options.flash_software:
    filename = os.path.basename( options.flash_software )
    binary = IntelHex( options.flash_software )
    binary.readfile()
    boardName, cpuName, rest = filename.split('_', 2)
    board = get_board( boardName )
    print "entering bootloader of", board.name,
    cmd = CmdReset(board)
    mk.send_cmd(cmd)
    reply = ""
    tries = 10
    while reply.find("MKBL") == -1 and tries > 0:
        print ".",
        sys.stdout.flush()
        tries -= 1
        time.sleep(0.1)
        mk.send_data( chr(27), 0.020 )
        mk.send_data( chr(0xaa), 0 )
        data = mk.recv_timeout(4096, 0.2)
        if mk.debug:
            for c in data: print hex(ord(c)),
            if data: print "'%s'" % data
        reply += data
    if not tries:
        print "FAILED"
        sys.exit(1)
    print "OK"
    # read any pending data
    while mk.recv_timeout(4096, 0.5): pass

    cpu = None
    if mk.debug:
        print "determining CPU"
    mk.send_data( 't', 0 )
    data = mk.recv_data(2, 1)
    if mk.debug:
        for c in data: print hex(ord(c)),
    if data == chr(0x74)+chr(0):
        cpuType = data[0]
        cpu = "MEGA644"
        memory = 64 * 1024
    elif data == chr(0x76)+chr(0):
        cpuType = data[0]
        cpu = "MEGA8"
        memory = 8 * 1024
    elif data == chr(0x78)+chr(0):
        cpuType = data[0]
        cpu = "MEGA168"
        memory = 16 * 1024
    elif data == chr(0xe0)+chr(0):
        cpuType = data[0]
        cpu = "STR9"
        memory = 256 * 1024
    else:
        mk.send_data( 'E', 0)
        print "failed to determine CPU"
        sys.exit(1)
    print "CPU", cpu
    if cpu != cpuName:
        mk.send_data( 'E', 0)
        print "wrong CPU type"
        sys.exit(1)

    if binary.maxaddr() >= memory:
        print "image does not fit into memory"
        mk.send_data( 'E', 0)
        sys.exit(1)

    if mk.debug:
        print "setting device type"
    mk.send_data('T' + cpuType, 0)
    data = mk.recv_data(1, 1)
    if mk.debug:
        for c in data: print hex(ord(c)),
    if data != chr(0x0d):
        mk.send_data( 'E', 0)
        print "could not set CPU type"
        sys.exit(1)

    if mk.debug:
        print "requesting version"
    mk.send_data('V', 0)
    data = mk.recv_data(2, 1)
    if mk.debug:
        for c in data: print hex(ord(c)),
    print "bootloader version", data

    if mk.debug:
        print "get buffer size"
    mk.send_data('b', 0)
    data = mk.recv_data(3, 1)
    if mk.debug:
        for c in data: print hex(ord(c)),
    if len(data) != 3 or data[0] != 'Y':
        mk.send_data( 'E', 0)
        print "could not get buffer size"
        sys.exit(1)
    buffersize, = struct.unpack('!H', data[1:3])
    print "buffer size", buffersize

#    # dump old contents
#    offset = 0
#    mk.send_data('A' + struct.pack('!H', offset), 0)
#    data = mk.recv_data(1, 1)
#    if data != chr(0x0d):
#        mk.send_data( 'E', 0)
#        raise "could not set target address"
#    backup = IntelHex(None)
#    while offset < memory:
#        print "downloading", offset, "\r",
#        sys.stdout.flush()
#        mk.send_data('g' + struct.pack('!H', buffersize) + 'F', 0)
#        received = mk.recv_data(buffersize, 10)
#        if not received:
#            print "nothing received at", len(data)
#            raise "recv error"
#        elif len(received) != buffersize:
#            print "received", len(received), "instead of", buffersize
#            if mk.debug:
#                for c in received: print hex(ord(c)),
#                print ""
#            raise "recv error"
#        for byte in received:
#            backup[offset] = ord(byte)
#            offset += 1
#    print "writing backup         \r",
#    sys.stdout.flush()
#    backup.writefile( options.flash_software + ".bak" )
#    print "backup OK     "

#    # TODO: for NC: set size which has to be erased
#    print "clearing flash",
#    mk.send_data('e', 0)
#    data = mk.recv_data(1, 10)
#    if mk.debug:
#        for c in data: print hex(ord(c)),
#    if data != chr(0x0d):
#        mk.send_data( 'E', 0)
#        print "could not clear flash"
#        sys.exit(1)
#
#    # flash new software
#    offset = binary.minaddr()
#    end = binary.maxaddr()
#    mk.send_data('A' + struct.pack('!H', offset), 0)
#    data = mk.recv_data(1, 1)
#    if data != chr(0x0d):
#        mk.send_data( 'E', 0)
#        print "could not set target address"
#        sys.exit(1)
#    while offset <= end:
#        print "writing", offset, "\r",
#        sys.stdout.flush()
#        size = buffersize
#        if size > end - offset+1: size = end-offset+1
#        block = ""
#        for i in range(size):
#            block += chr( binary[offset] )
#            offset += 1
#        mk.send_data('B' + struct.pack('!H', size) + 'F', 0)
#        mk.send_data(block, 0)
#        # TODO: for NC: CRC
#        received = mk.recv_data(1, 10)
#        if not received:
#            print "nothing received at", len(data)
#            mk.send_data( 'E', 0)
#            sys.exit(1)
#        elif received != chr(0x0d):
#            print "write error", hex(ord(received)), "at", offset
#            mk.send_data( 'E', 0)
#            sys.exit(1)
#    print "wrote", offset, "bytes"

    # verify software
    offset = binary.minaddr()
    end = binary.maxaddr()
    mk.send_data('A' + struct.pack('!H', offset), 0)
    data = mk.recv_data(1, 1)
    if data != chr(0x0d):
        mk.send_data( 'E', 0)
        print "could not set target address"
        sys.exit(1)
    ok = True
    while offset <= end:
        print "verifying", offset, "\r",
        sys.stdout.flush()
        size = buffersize
        if size > end - offset+1: size = end-offset+1
        mk.send_data('g' + struct.pack('!H', size) + 'F', 0)
        received = mk.recv_data(size, 10)
        if not received:
            print "nothing received at", len(data)
            ok = False
        elif len(received) != size:
            print "received", len(received), "instead of", size
            ok = False
            if mk.debug:
                for c in received: print hex(ord(c)),
                print ""
        for byte in received:
            if binary[offset] != ord(byte):
                ok = False
                break
            offset += 1
        if not ok:
            break
    # exit boot loader
    mk.send_data( 'E', 0)

    if ok:
        print "verify OK          "
    else:
        print "verify error at offset", offset
        sys.exit(1)

#if options.gps:
#    send_packet(link, 'c', 'u', [2])
#    ubx = UBX()
#    while True:
#        data = link.read(1)
#        ubx.parse(ord(data[0]))
#    link.write("#" + chr(0x1b) + chr(0x1b) +
#               chr(0x55) + chr(0xaa) + chr(0) + '\r')

if options.channels:
    while True:
        cmd = CmdGetChannels(mk.fc)
        reply = mk.send_cmd(cmd)
        print "channels", reply

